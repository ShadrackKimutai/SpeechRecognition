/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package speechrecognition;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JFileChooser;
import org.encog.neural.networks.BasicNetwork;
import org.encog.neural.networks.PersistBasicNetwork;
import org.encog.persist.EncogDirectoryPersistence;
import speechrecognition.audio.Clip;
import speechrecognition.audio.ClipCapture;
import speechrecognition.audio.ClipPlayback;
import speechrecognition.audio.features.FeaturesExtractor;
import speechrecognition.audio.features.PerFrameBandsFeatureExtractor;
import speechrecognition.audio.features.PerFrameMFCCFeatureExtractor;
import speechrecognition.audio.features.PerFrameStrongFreqsFeatureExtractor;
import speechrecognition.audio.features.SpectrumFeatureExtractor;
import speechrecognition.util.ArrayUtil;

/**
 *
 * @author davinchi
 */
public class Recognize extends javax.swing.JFrame {

    private final int NUMBERS_COUNT = 10;
    private JFileChooser fc = new JFileChooser();
    private FeaturesExtractor fe = null;
    private List<String> dictorsList = null;
    private BasicNetwork numberNeuralNetwork = null;
    private BasicNetwork dictorNeuralNetwork = null;
    private ClipCapture clipCapture = null;
    private ClipPlayback clipPlayback = null;
    private Clip clip = null;

    /**
     * Creates new form Recognize
     */
    public Recognize() {
        initComponents();

        readDefaultFiles();
    }

    private void readDefaultFiles() {
        File file = new File("serialized.txt");
        if (file.exists()) {
            readSoundbase(file);
        }

        file = new File("nn.eg");
        if (file.exists()) {
            numberNeuralNetwork = readNeuralNetwork(file);
            updateNeuralLabel(numberNeuralNetwork, jNNLabel);
        }

        int outputLayerN = numberNeuralNetwork.getLayerNeuronCount(numberNeuralNetwork.getLayerCount() - 1);
        boolean needDictorsNN = outputLayerN < dictorsList.size() * NUMBERS_COUNT;
        jReadDictorsNeuralNetworkButton.setEnabled(needDictorsNN);

        if (needDictorsNN) {
            file = new File("nn-dictor.eg");
            if (file.exists()) {
                dictorNeuralNetwork = readNeuralNetwork(file);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jReadSoundbaseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jDictorsLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jFELabel = new javax.swing.JLabel();
        jReadNetworkButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jNNLabel = new javax.swing.JLabel();
        jRecordButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jRecognizeResults = new javax.swing.JTextArea();
        jPlayButton = new javax.swing.JButton();
        jReadDictorsNeuralNetworkButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jReadSoundbaseButton.setText("Read Soundbase");
        jReadSoundbaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReadSoundbaseButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Dictors:");

        jDictorsLabel.setText("0");

        jLabel2.setText("Features Extractor:");

        jFELabel.setText(null);

        jReadNetworkButton.setText("Read network");
        jReadNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReadNetworkButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("NN info:");

        jNNLabel.setText(null);

        jRecordButton.setText("Record");
        jRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecordButtonActionPerformed(evt);
            }
        });

        jRecognizeResults.setColumns(20);
        jRecognizeResults.setRows(5);
        jRecognizeResults.setText("Recognition here");
        jScrollPane1.setViewportView(jRecognizeResults);

        jPlayButton.setText("Play");
        jPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPlayButtonActionPerformed(evt);
            }
        });

        jReadDictorsNeuralNetworkButton.setText("Read dictors network");
        jReadDictorsNeuralNetworkButton.setEnabled(false);
        jReadDictorsNeuralNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReadDictorsNeuralNetworkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jRecordButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(jPlayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jReadSoundbaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDictorsLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFELabel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jReadNetworkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jReadDictorsNeuralNetworkButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDictorsLabel)
                    .addComponent(jReadSoundbaseButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jFELabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jReadNetworkButton)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jReadDictorsNeuralNetworkButton))
                    .addComponent(jNNLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRecordButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPlayButton)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseNumberNeuralNetwork() {
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnVal = fc.showOpenDialog(Recognize.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            numberNeuralNetwork = readNeuralNetwork(file);
            updateNeuralLabel(numberNeuralNetwork, jNNLabel);
            int outputLayerN = numberNeuralNetwork.getLayerNeuronCount(numberNeuralNetwork.getLayerCount() - 1);
            jReadDictorsNeuralNetworkButton.setEnabled(outputLayerN < dictorsList.size() * NUMBERS_COUNT);
        }
    }

    private void chooseDictorNeuralNetwork() {
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnVal = fc.showOpenDialog(Recognize.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            dictorNeuralNetwork = readNeuralNetwork(file);
            assert (dictorsList.size()
                    == dictorNeuralNetwork.getLayerNeuronCount(dictorNeuralNetwork.getLayerCount() - 1));
        }
    }

    private BasicNetwork readNeuralNetwork(File file) {
        return (BasicNetwork) EncogDirectoryPersistence.loadObject(file);
    }

    private void updateNeuralLabel(BasicNetwork nn, javax.swing.JLabel label) {

        StringBuilder nnlabel = new StringBuilder();

        nnlabel.append("Layers: ");
        nnlabel.append(String.valueOf(nn.getLayerCount()));
        nnlabel.append("; ");

        nnlabel.append("Total neurons: ");
        for (int i = 0; i < nn.getLayerCount(); ++i) {
            nnlabel.append(String.valueOf(nn.getLayerTotalNeuronCount(i)));
            if (i != nn.getLayerCount() - 1) {
                nnlabel.append(", ");
            }
        }

        label.setText(nnlabel.toString());
    }

    private void chooseSoundbase() {
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnVal = fc.showOpenDialog(Recognize.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            readSoundbase(file);
        }
    }

    private void readSoundbase(File file) {
        /* TODO: write class with this info */
        try {
            final FileInputStream fis = new FileInputStream(file);
            final BufferedReader br = new BufferedReader(new InputStreamReader(fis));

            String version = br.readLine();
            //System.out.println(version);

            int dictorsCount = Integer.parseInt(br.readLine());
            StringBuilder dictorsTotal = new StringBuilder();
            dictorsTotal.append(String.valueOf(dictorsCount));
            dictorsTotal.append(": ");
            dictorsList = new ArrayList<String>();

            for (int i = 0; i < dictorsCount; ++i) {
                String dictorName = br.readLine();
                dictorsList.add(dictorName);
                dictorsTotal.append(dictorName);
                if (i != dictorsCount - 1) {
                    dictorsTotal.append(",");
                }
            }

            jDictorsLabel.setText(dictorsTotal.toString());


            System.out.println(br.readLine());
            String feName = br.readLine();
            jFELabel.setText(feName);

            if (feName.equals("PerFrameBandsFeatureExtractor")) {
                fe = PerFrameBandsFeatureExtractor.fromStream(br);
            } else if (feName.equals("SpectrumFeatureExtractor")) {
                fe = SpectrumFeatureExtractor.fromStream(br);
            } else if (feName.equals("PerFrameStrongFreqsFeatureExtractor")) {
                fe = PerFrameStrongFreqsFeatureExtractor.fromStream(br);
            } else if (feName.equals("PerFrameMFCCFeatureExtractor")) {
                fe = PerFrameMFCCFeatureExtractor.fromStream(br);
            } else {
                throw new IllegalStateException("Cannot find FE: " + feName);
            }

        } catch (IOException e) {
            jRecognizeResults.append(e.getMessage() + "\n");
        }
    }

    private void startPlayback() {
        clipPlayback = new ClipPlayback(clip.getAudioInputStream());
        clipPlayback.start();
        jPlayButton.setText("Stop");
    }

    private void stopPlayback() {
        clipPlayback.stop();
        jPlayButton.setText("Play");
    }

    private void startRecording() {
        if (fe == null) {
            return;
        }

        clipCapture = new ClipCapture();

        clipCapture.start();
        jRecordButton.setText("Stop");
    }

    private void stopRecording() {

        if (fe == null) {
            return;
        }

        jRecordButton.setText("Record");
        try {
            clipCapture.stop();
        } catch (Exception e) {
            jRecognizeResults.append(e.getMessage());
            return;
        }


        try {
            clip = Clip.newInstance(clipCapture.getAudioInputStream());
        } catch (Exception e) {
            jRecognizeResults.append(e.getMessage());
            return;
        } finally {
            clipCapture = null;
        }

        fe.featureFromClip(clip);
        int number = -1, dictor = -1;
        double[] fv = fe.extractFeatureVector(clip);
        jRecognizeResults.append("\nFV: ");
        jRecognizeResults.append(Arrays.toString(fv) + "\n");

        if (dictorNeuralNetwork != null) {
            double[] output = new double[NUMBERS_COUNT];
            numberNeuralNetwork.compute(fv, output);

            int[] idx = ArrayUtil.argsort(output, false);
            jRecognizeResults.append("Number idx: " + Arrays.toString(idx) + "\n");
            number = idx[0];

            output = new double[dictorsList.size()];
            dictorNeuralNetwork.compute(fv, output);

            idx = ArrayUtil.argsort(output, false);
            jRecognizeResults.append("Dictor idx: " + Arrays.toString(idx) + "\n");

            dictor = idx[0];
        } else {
            double[] output = new double[NUMBERS_COUNT * dictorsList.size()];
            numberNeuralNetwork.compute(fv, output);

            int[] idx = ArrayUtil.argsort(output, false);
            number = idx[0] % 10;
            dictor = idx[0] / 10;

            jRecognizeResults.append("IDX: " + Arrays.toString(idx) + "\n");
        }



        /*
         jRecognizeResults.append("Output: ");
         jRecognizeResults.append(Arrays.toString(output) + "\n");
         */


        jRecognizeResults.append(
                "Dictor: " + String.valueOf(dictorsList.get(dictor))
                + ", Number: " + String.valueOf(number)
                + "\n");
    }

    private void jReadSoundbaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReadSoundbaseButtonActionPerformed
        // TODO add your handling code here:
        chooseSoundbase();
    }//GEN-LAST:event_jReadSoundbaseButtonActionPerformed

    private void jReadNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReadNetworkButtonActionPerformed
        // TODO add your handling code here:
        chooseNumberNeuralNetwork();
    }//GEN-LAST:event_jReadNetworkButtonActionPerformed

    private void jRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRecordButtonActionPerformed
        // TODO add your handling code here:
        if (clipCapture == null) {
            startRecording();
        } else {
            stopRecording();
        }
    }//GEN-LAST:event_jRecordButtonActionPerformed

    private void jPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayButtonActionPerformed
        // TODO add your handling code here:
        if (clipCapture == null) {
            startPlayback();
        } else {
            stopPlayback();
        }
    }//GEN-LAST:event_jPlayButtonActionPerformed

    private void jReadDictorsNeuralNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReadDictorsNeuralNetworkButtonActionPerformed
        // TODO add your handling code here:
        chooseDictorNeuralNetwork();
    }//GEN-LAST:event_jReadDictorsNeuralNetworkButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Recognize.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Recognize.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Recognize.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Recognize.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Recognize().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jDictorsLabel;
    private javax.swing.JLabel jFELabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jNNLabel;
    private javax.swing.JButton jPlayButton;
    private javax.swing.JButton jReadDictorsNeuralNetworkButton;
    private javax.swing.JButton jReadNetworkButton;
    private javax.swing.JButton jReadSoundbaseButton;
    private javax.swing.JTextArea jRecognizeResults;
    private javax.swing.JButton jRecordButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
